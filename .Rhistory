ls
ls()
dir()
readData <- function(path) {
dat <- vroom::vroom(path)
return(dat)
}
readData("/Users/matthewlee/Library/CloudStorage/Box-Box/Data for Sara 2021 project/UPCBevprice_bmore.csv")
spec()
vroom::spec()
readData <- function(dat_p, skey_p, bkey_p) {
dat  = vroom::vroom(dat_p, delim = ",")
skey = vroom::vroom(skey_p, delim = ",")
bkey = vroom::vroom(bkey_p, delim = ",")
L = list(data = dat, storekey = skey, bevkey = bkey)
return(L)
}
dat_p = "/Users/matthewlee/Library/CloudStorage/Box-Box/Data for Sara 2021 project/UPCBevprice_bmore.csv"
skey_p = "/Users/matthewlee/Harvard University/Kid APPS - Documents/Data IRI and Kantar/IRI Beverage Sales/analysis/data/raw/StoreKey.csv"
bkey_p = "/Users/matthewlee/Harvard University/Kid APPS - Documents/Data IRI and Kantar/IRI Beverage Sales/analysis/data/raw/BeverageKey.csv"
d <- readData(dat_p, skey_p, bkey_p)
d
readData <- function(city, dat_p, skey_p, bkey_p, pa_dirs = NULL) {
if (city == "Baltimore") {
dat  = vroom::vroom(dat_p, delim = ",")
skey = vroom::vroom(skey_p, delim = ",")
bkey = vroom::vroom(bkey_p, delim = ",")
L = list(data = dat, storekey = skey, bevkey = bkey)
} else if (city == "Philadelphia") {
if (is.NULL(pa_dirs)) stop("Philly directories missing.")
dat = vroom::vroom(pa_dirs, delim = ",")
skey = vroom::vroom(skey_p, delim = ",")
bkey = vroom::vroom(bkey_p, delim = ",")
L = list(data = dat, storekey = skey, bevkey = bkey)
}
return(L)
}
pa_dirs <- fs::dir_ls(path = "/Users/matthewlee/Library/CloudStorage/Box-Box/Data for Sara 2021 project/", glob = "*_pa.csv")
ps_dirs
pa_dirs
d <- readData(city = "Philadelphia", pa_dirs = pa_dirs, skey_p = skey_p, bkey_p = bkey_p)
readData <- function(city, dat_p, skey_p, bkey_p, pa_dirs = NULL) {
if (city == "Baltimore") {
dat  = vroom::vroom(dat_p, delim = ",")
skey = vroom::vroom(skey_p, delim = ",")
bkey = vroom::vroom(bkey_p, delim = ",")
L = list(data = dat, storekey = skey, bevkey = bkey)
} else if (city == "Philadelphia") {
if (is.null(pa_dirs)) stop("Philly directories missing.")
dat = vroom::vroom(pa_dirs, delim = ",")
skey = vroom::vroom(skey_p, delim = ",")
bkey = vroom::vroom(bkey_p, delim = ",")
L = list(data = dat, storekey = skey, bevkey = bkey)
}
return(L)
}
d <- readData(city = "Philadelphia", pa_dirs = pa_dirs, skey_p = skey_p, bkey_p = bkey_p)
d
d <- readData(dat_p, skey_p, bkey_p)
d <- readData(city = "Baltimore", dat_p, skey_p, bkey_p)
d
d <- readData(city = "Philadelphia", skey_p = skey_p, bkey_p = bkey_p)
d
ls()
file.size(ls())
file.size(list = ls())
object.size(ls())
object.size(
)
object.size(d)
cleanData <- function(L) {
# merge sales data and beverage/store keys
dat <- dtplyr::lazy_dt(L$dat) %>%
left_join(L$storekey, by = "ID") %>%
left_join(L$bevkey, by = "ItemCode")
return(dat)
}
d_clean <- cleanData(d)
library(dplyr
)
cleanData <- function(L) {
# merge sales data and beverage/store keys
dat <- dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode")
return(dat)
}
d_clean <- cleanData(d)
d_clean
class(d)clean
class(d_clean)
d
cleanData <- function(L) {
# merge sales data and beverage/store keys
dat <-
dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode") %>%
as.data.table()
return(dat)
}
d_clean <- cleanData(d)
cleanData <- function(L) {
# merge sales data and beverage/store keys
dat <-
dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode") %>%
data.table::as.data.table()
return(dat)
}
d_clean <- cleanData(d)
d_clean
nrow(d_clean)
nrow(d$data)
colSums(is.na(d_clean))
xtabs(~sweetener, d_clean)
nrow(d_clean)
cleanData <- function(L) {
# merge sales data and beverage/store keys,
# then drop any store with a storedrop flag
dat = dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode") %>%
dplyr::rename_all(tolower) %>%
data.table::as.data.table()
# print original count
count_n(dat)
# clean dates from periodend string
dat$pend_date = lubridate::mdy(dat$periodend) # string as date class
dat$monthyr   = lubridate::floor_date(dat$pend_date, "month") # month-year floor
# return cleaned data
return(dat)
}
count_n <- function(dat) {
# count unique stores and items by town and storetype
cat("Original Count ================= \n")
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(item)) , by = c("town", "storetype")
]
cat("\n")
}
d_clean <- cleanData(d)
count_n <- function(dat) {
# count unique stores and items by town and storetype
cat("Original Count ================= \n")
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(itemcode)) , by = c("town", "storetype")
]
cat("\n")
}
d_clean <- cleanData(d)
count_n <- function(dat) {
# count unique stores and items by town and storetype
cat("Original Count ================= \n")
cat(
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(itemcode)) , by = c("town", "storetype")
]
)
cat("\n")
}
d_clean <- cleanData(d)
count_n <- function(dat) {
# count unique stores and items by town and storetype
cat("Original Count ================= \n")
print(
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(itemcode)) , by = c("town", "storetype")
]
)
cat("\n")
}
d_clean <- cleanData(d)
count_n <- function(dat, label) {
# count unique stores and items by town and storetype
cat(paste0(label, " ===================================================\n"))
print(
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(itemcode)) , by = c("town", "storetype")
]
)
cat("\n")
}
cleanData <- function(L) {
# merge sales data and beverage/store keys,
# then drop any store with a storedrop flag
dat = dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode") %>%
dplyr::rename_all(tolower) %>%
data.table::as.data.table()
# print original count
count_n(dat, "Original Count")
# clean dates from periodend string
dat$pend_date = lubridate::mdy(dat$periodend) # string as date class
dat$monthyr   = lubridate::floor_date(dat$pend_date, "month") # month-year floor
# return cleaned data
return(dat)
}
d_clean <- cleanData(d)
d
###############################################################################
#
# Project:     Functions to clean IRI data
# Author:      Matt Lee
# Date:        2021
#
###############################################################################
#' Count the N's
#'
#' Helper function to count the number of unique stores and items by town and storetype
#'
#' @param dat A data.table object
#' @return nothing, prints the stratified counts
#'
#' @export
count_n <- function(dat, label) {
# count unique stores and items by town and storetype
cat(paste0(label, " ===================================================\n"))
print(
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(itemcode)) , by = c("town", "storetype")
]
)
cat("\n")
}
#' Noisy cleaning function
#'
#' Cleans the IRI data in L,
#'
#' @param L A list of the sales, store key, and beverage key data
#' @return return
#'
#' @export
cleanData <- function(L) {
# merge sales data and beverage/store keys,
# then drop any store with a storedrop flag
dat <- dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode") %>%
dplyr::rename_all(tolower) %>%
data.table::as.data.table()
# clean dates from periodend string
dat$pend_date = lubridate::mdy(dat$periodend) # string as date class
dat$monthyr   = lubridate::floor_date(dat$pend_date, "month") # month-year floor
# basic factoring of descriptive variables
dat$town <- factor(dat$town, levels = c(1, 2, 3, 4),
labels = c("Philadelphia", "Baltimore", "Border Counties", "Non-border Counties"))
dat$tax <- factor(dat$tax, levels = c(0, 1), labels = c("Not-taxed", "Taxed"))
dat$storetype <- factor(dat$storetype, levels = c(1, 2, 3),
labels = c("Super/Grocery", "Mass Merchandiser", "Pharmacy"))
dat$sweetener <- factor(dat$sweetener, levels = c(1, 2, 0),
labels = c("Sugar Sweetened", "Artificially Sweetened", "Not Sweetened"))
dat$size <- factor(dat$size, levels = c(1, 2), labels = c("Individual", "Family"))
dat$category <- factor(dat$bevtype2,
levels = c(
"100% Juice", "Coffee", "Concentrates", "Diet Soda", "Energy Drink",
"Flavored Water", "Fruit Drink", "Iced Tea or Lemonade", "Milk", "Milk Alternative",
"Other non-SSB", "Other SSB", "Private Label", "Regular Soda", "Sparkling Water",
"Sports Drink", "Water"
)
)
# indicator for date > 2017-01-01
dat$post <- ifelse(dat$pend_date >= as_date("2017-01-01"), 1, 0)
# center time and make numeric (i.e. in days)
dat$time_centered <- as.numeric(dat$pend_date - as_date("2017-01-01"))
# create treatment indicator
dat$treated <- ifelse(dat$town == "Philadelphia", 1, 0)
# print original count
count_n(dat, "Original Count")
# return cleaned data
return(dat)
}
d_clean <- cleanData(d)
d_small = d[1:1000,]
d
d_smaller = d
d_smaller
d_smaller$data = d_smaller$data[1:1000,]
d_smaller
###############################################################################
#
# Project:     Functions to clean IRI data
# Author:      Matt Lee
# Date:        2021
#
###############################################################################
#' Count the N's
#'
#' Helper function to count the number of unique stores and items by town and storetype
#'
#' @param dat A data.table object
#' @return nothing, prints the stratified counts
#'
#' @export
count_n <- function(dat, label) {
# count unique stores and items by town and storetype
cat(paste0(label, " ===================================================\n"))
print(
dat[, .(n_stores = data.table::uniqueN(id),
n_items = data.table::uniqueN(itemcode)) , by = c("town", "storetype")
]
)
cat("\n")
}
#' Noisy cleaning function
#'
#' Cleans the IRI data in L,
#'
#' @param L A list of the sales, store key, and beverage key data
#' @return return
#'
#' @export
cleanData <- function(L) {
# merge sales data and beverage/store keys,
# then drop any store with a storedrop flag
dat <- dtplyr::lazy_dt(L$dat) %>%
dplyr::left_join(L$storekey, by = "ID") %>%
dplyr::left_join(L$bevkey, by = "ItemCode") %>%
dplyr::rename_all(tolower) %>%
data.table::as.data.table()
# clean dates from periodend string
dat$pend_date = lubridate::mdy(dat$periodend) # string as date class
dat$monthyr   = lubridate::floor_date(dat$pend_date, "month") # month-year floor
# basic factoring of descriptive variables
dat$town <- factor(dat$town, levels = c(1, 2, 3, 4),
labels = c("Philadelphia", "Baltimore", "Border Counties", "Non-border Counties"))
dat$tax <- factor(dat$tax, levels = c(0, 1), labels = c("Not-taxed", "Taxed"))
dat$storetype <- factor(dat$storetype, levels = c(1, 2, 3),
labels = c("Super/Grocery", "Mass Merchandiser", "Pharmacy"))
dat$sweetener <- factor(dat$sweetener, levels = c(1, 2, 0),
labels = c("Sugar Sweetened", "Artificially Sweetened", "Not Sweetened"))
dat$size <- factor(dat$size, levels = c(1, 2), labels = c("Individual", "Family"))
dat$category <- factor(dat$bevtype2,
levels = c(
"100% Juice", "Coffee", "Concentrates", "Diet Soda", "Energy Drink",
"Flavored Water", "Fruit Drink", "Iced Tea or Lemonade", "Milk", "Milk Alternative",
"Other non-SSB", "Other SSB", "Private Label", "Regular Soda", "Sparkling Water",
"Sports Drink", "Water")
)
# indicator for date > 2017-01-01
dat$post <- ifelse(dat$pend_date >= lubridate::as_date("2017-01-01"), 1, 0)
# center time and make numeric (i.e. in days)
dat$time_centered <- as.numeric(dat$pend_date - lubridate::as_date("2017-01-01"))
# create treatment indicator
dat$treated <- ifelse(dat$town == "Philadelphia", 1, 0)
# print original count
count_n(dat, "Original Count")
# return cleaned data
return(dat)
}
d_clean <- cleanData(d_smaller)
d_clean
ls()
if (!require("raster"))   install.packages("raster")
if (!require("maptools")) install.packages("maptools")
if (!require("proj4"))    install.packages("proj4")
if (!require("ncdf4"))    install.packages("ncdf4")
if (!require("rgdal"))    install.packages("rgdal")
install.packages("nhanesA")
nhanesA::browseNHANES
nhanesA::nhanes
setwd("/Volumes/GoogleDrive-101809232694958266345/My Drive/Matt/School/PhD /2021-2022/BST 262/Project/bst262-final")
ls
dir()
devtools::create("imputevalR")
